package helloworld.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_ForEachStatement_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_ForEachStatement_InferenceRule() {
  }

  public void applyRule(final SNode fes, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(fes, "len", true);
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:4934c599-dc0b-40c9-8298-f020ee0a4a20(helloworld.typesystem)", "2483084443615272235", 0, null);
      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:4934c599-dc0b-40c9-8298-f020ee0a4a20(helloworld.typesystem)", "2483084443615272239", true), (SNode) SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.Int64tType", null), false, true, _info_12389875345);
    }
    if (!(SNodeOperations.isInstanceOf(typeCheckingContext.typeOf(SLinkOperations.getTarget(fes, "array", true), "r:4934c599-dc0b-40c9-8298-f020ee0a4a20(helloworld.typesystem)", "1298360439366063933", true), "jetbrains.mps.baseLanguage.structure.ArrayType"))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(fes, "array", true), "array required", "r:4934c599-dc0b-40c9-8298-f020ee0a4a20(helloworld.typesystem)", "2483084443615396672", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "helloworld.structure.ForEachStatement";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
