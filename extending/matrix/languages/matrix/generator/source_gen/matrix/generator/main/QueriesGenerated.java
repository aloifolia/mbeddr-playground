package matrix.generator.main;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.MapSrcMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.TemplateQueryContextWithMacro;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class QueriesGenerated {
  public static SNode mapSrcMacro_mapper_2705117739343709573(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode matrix = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArrayInitExpression", null);
    for (int i = 0; i < ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "cols", true)).count(); ++i) {
      SNode col = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArrayInitExpression", null);
      for (int j = 0; j < ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "cols", true)).first(), "elements", true)).count(); ++j) {
        SNode element = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerConstant", null);
        ListSequence.fromList(SLinkOperations.getTargets(col, "exprs", true)).addElement(SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "cols", true)).getElement(i), "elements", true)).getElement(j)));
      }
      ListSequence.fromList(SLinkOperations.getTargets(matrix, "exprs", true)).addElement(col);
    }
    return matrix;
  }

  public static SNode insertMacro_Query_2705117739343738743(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    SNode colSize = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
    SPropertyOperations.set(colSize, "value", String.valueOf(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "cols", true)).count()));
    return colSize;
  }

  public static SNode insertMacro_Query_2705117739343735507(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    SNode rowSize = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
    SPropertyOperations.set(rowSize, "value", String.valueOf(ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "cols", true)).first(), "elements", true)).count()));
    return rowSize;
  }

  public static SNode insertMacro_Query_6407379077121640993(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    SNode matrixType = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ArrayType", null);
    SNode colSize = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
    SPropertyOperations.set(colSize, "value", "1");
    SNode rowSize = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
    SPropertyOperations.set(rowSize, "value", String.valueOf(SPropertyOperations.getInteger(_context.getNode(), "dimensionsRows")));
    SLinkOperations.setTarget(matrixType, "sizeExpr", colSize, true);
    SNode rowType = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ArrayType", null);
    SLinkOperations.setTarget(rowType, "sizeExpr", rowSize, true);
    SLinkOperations.setTarget(rowType, "baseType", _quotation_createNode_x583g4_a0i0d(), true);
    SLinkOperations.setTarget(rowType, "baseType", SLinkOperations.getTarget(_context.getNode(), "baseType", true), true);
    SLinkOperations.setTarget(matrixType, "baseType", rowType, true);
    return matrixType;
  }

  public static SNode insertMacro_Query_6407379077122422343(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    SNode matrixType = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ArrayType", null);
    SNode colSize = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
    SPropertyOperations.set(colSize, "value", String.valueOf(SPropertyOperations.getInteger(_context.getNode(), "dimensionsCols")));
    SNode rowSize = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
    SPropertyOperations.set(rowSize, "value", String.valueOf(SPropertyOperations.getInteger(_context.getNode(), "dimensionsRows")));
    SLinkOperations.setTarget(matrixType, "sizeExpr", colSize, true);
    SNode rowType = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ArrayType", null);
    SLinkOperations.setTarget(rowType, "sizeExpr", rowSize, true);
    SLinkOperations.setTarget(rowType, "baseType", _quotation_createNode_x583g4_a0i0e(), true);
    SLinkOperations.setTarget(rowType, "baseType", SLinkOperations.getTarget(_context.getNode(), "baseType", true), true);
    SLinkOperations.setTarget(matrixType, "baseType", rowType, true);
    return matrixType;
  }

  private static SNode _quotation_createNode_x583g4_a0i0d() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("com.mbeddr.core.expressions.structure.Int8tType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_1, "volatile", "false");
    SNodeAccessUtil.setProperty(quotedNode_1, "const", "false");
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_x583g4_a0i0e() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("com.mbeddr.core.expressions.structure.Int8tType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_1, "volatile", "false");
    SNodeAccessUtil.setProperty(quotedNode_1, "const", "false");
    return quotedNode_1;
  }
}
