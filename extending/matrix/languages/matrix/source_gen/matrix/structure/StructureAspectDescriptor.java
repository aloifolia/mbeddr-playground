package matrix.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("matrix.structure.CrossProductExpression").super_("com.mbeddr.core.expressions.structure.BinaryArithmeticExpression").parents("com.mbeddr.core.expressions.structure.BinaryArithmeticExpression").alias("x", "cross-product").create();
      case 1:
        return new ConceptDescriptorBuilder("matrix.structure.IMatrixType").interface_().properties("dimensionsRows").children(new String[]{"baseType"}, new boolean[]{false}).create();
      case 2:
        return new ConceptDescriptorBuilder("matrix.structure.MatrixLiteral").super_("com.mbeddr.core.expressions.structure.Literal").parents("com.mbeddr.core.expressions.structure.Literal").children(new String[]{"cols"}, new boolean[]{true}).alias("[", "Matrix").create();
      case 3:
        return new ConceptDescriptorBuilder("matrix.structure.MatrixLiteralCol").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"elements"}, new boolean[]{true}).create();
      case 4:
        return new ConceptDescriptorBuilder("matrix.structure.MatrixType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type", "matrix.structure.IMatrixType").properties("dimensionsCols").alias("matrix", "").create();
      case 5:
        return new ConceptDescriptorBuilder("matrix.structure.VectorType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type", "matrix.structure.IMatrixType").alias("vector", "").create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"matrix.structure.CrossProductExpression", "matrix.structure.IMatrixType", "matrix.structure.MatrixLiteral", "matrix.structure.MatrixLiteralCol", "matrix.structure.MatrixType", "matrix.structure.VectorType"};
}
