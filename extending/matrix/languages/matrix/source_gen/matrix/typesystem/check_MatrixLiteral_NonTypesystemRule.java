package matrix.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_MatrixLiteral_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_MatrixLiteral_NonTypesystemRule() {
  }

  public void applyRule(final SNode matrixLiteral, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final SNode firstCol = ListSequence.fromList(SLinkOperations.getTargets(matrixLiteral, "cols", true)).first();

    if (ListSequence.fromList(SLinkOperations.getTargets(matrixLiteral, "cols", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SLinkOperations.getTargets(it, "elements", true)).count() != ListSequence.fromList(SLinkOperations.getTargets(firstCol, "elements", true)).count();
      }
    })) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(matrixLiteral, "all columns must have the same size", "r:bc130767-30fc-4826-96c0-0b2cf8feb3a8(matrix.typesystem)", "4002833866079181666", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "matrix.structure.MatrixLiteral";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
